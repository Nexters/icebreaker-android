plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    alias(libs.plugins.ktlint.gradle)
    id 'kotlin-kapt'
    id 'com.google.dagger.hilt.android'
    id 'com.google.gms.google-services'
    id 'kotlin-parcelize'
    id 'com.google.firebase.crashlytics'
}

android {
    signingConfigs {
        debug {
            storeFile rootProject.file("private/debug.keystore")
        }
        release {
            storeFile rootProject.file("private/release.keystore")
            storePassword 'talkbbokki'
            keyAlias 'key0'
            keyPassword 'talkbbokki'
        }
    }
    namespace 'com.hammer.talkbbokki'
    compileSdk 33

    defaultConfig {
        applicationId "com.hammer.talkbbokki"
        minSdk 26
        targetSdk 33
        versionCode 6
        versionName "2.0.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
        buildConfigField "boolean", "IS_PRODUCTION", "false"
    }

    buildTypes {
        debug {
            debuggable true
            signingConfig signingConfigs.debug
        }
        release {
            debuggable false
            minifyEnabled false
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        benchmark {
            initWith buildTypes.release
            signingConfig signingConfigs.debug
            matchingFallbacks = ['release']
            debuggable false
        }
    }
    flavorDimensions "deploy"
    productFlavors {
        prod {
            dimension "deploy"
            buildConfigField "boolean", "IS_PRODUCTION", "true"
        }
        dev {
            dimension "deploy"
            applicationId defaultConfig.applicationId + ".dev"
            signingConfig signingConfigs.debug
            versionName(defaultConfig.versionName + " dev")
        }
    }
    sourceSets {
        main {
            res.srcDirs = ['src/main/res']
        }
        dev {
            res.srcDirs = ['src/dev/res']
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.1.1'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    lintOptions {
        abortOnError false
        checkReleaseBuilds false
    }
    kapt {
        correctErrorTypes true
    }
}

dependencies {
    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.lifecycle)
    implementation(libs.androidx.activity.compose)
    implementation(libs.bundles.compose)
    implementation(libs.dagger.hilt)
    kapt(libs.dagger.hilt.compiler)
    implementation(libs.bundles.network)
    implementation(libs.androidx.compose.foundation)
    implementation(libs.androidx.constraintlayout)
    implementation(libs.compose.coil)
    implementation(libs.compose.hilt.navigation.compose)
    implementation(libs.compose.navigation.animation)
    implementation(libs.androidx.datasource.preference)
    implementation(libs.room.database)
    kapt(libs.room.compiler)
    implementation(libs.room.ktx)
    implementation(libs.compose.lottie)
    implementation(libs.bundles.accompanist)

    implementation(libs.flipper)
    implementation(libs.soloader)
    implementation(libs.flipper.network)

    implementation(libs.firebase.analytics.ktx)
    implementation(libs.firebase.crashlytics.ktx)
    implementation(libs.firebase.messaging)
    implementation(libs.firebase.core)
    implementation(libs.google.admob)

    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.test.ext)
    androidTestImplementation(libs.androidx.test.espresso)
    androidTestImplementation(libs.androidx.compose.test)
    debugImplementation(libs.androidx.compose.ui.tooling.core)
    debugImplementation(libs.androidx.compose.test.manifest)
}